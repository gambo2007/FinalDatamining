# -*- coding: utf-8 -*-
"""FinalDataMining_Ex2 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OkQFaWBXUELSW7mVCUBdCI9nn_Hg0P5D
"""

import pandas as pd 
import numpy as np

datatest = pd.read_excel('test_nor_811.xlsx',sheet_name="Sheet1")
datatrain = pd.read_excel('train_nor_811.xlsx',sheet_name="Sheet1")
datavalid = pd.read_excel('valid_nor_811.xlsx',sheet_name="Sheet1")

datatest = datatest.rename(columns={'Unnamed: 0': 'Number'})
datatrain = datatrain.rename(columns={'Unnamed: 0': 'Number'})
datavalid = datavalid.rename(columns={'Unnamed: 0': 'Number'})

datatest.head()

datatest.shape

datatrain.head()

datatrain.shape

datavalid.head()

datavalid.shape

data_new = datatrain.append([datatest])

data_new.head()

data = data_new.values
print(data.shape)

X = data[:400,-1:]
print(X.shape)
print(X[:5])

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
for i in range(X.shape[1]):
    X[:,i] = encoder.fit_transform(X[:,i])
print(X)

y = data[:400,-2]
y.ravel()
print(y.shape)
print(y[:10])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(\
    X, y, test_size=0.111, random_state=42)

print('Train:')
print(X_train.shape)
print(y_train.shape)
print('Test:')
print(X_test.shape)
print(y_test.shape)

from sklearn import svm 
model = svm.SVC(kernel='linear',gamma=0.01, C=100.)
model.fit(X_train,y_train)

y_pred = model.predict(X_test)
for i in range(len(y_test)):
    print(y_test[i],y_pred[i])

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)

data_new2 = datatrain.append([datavalid])

data_new2.head()

data2 = data_new2.values
print(data2.shape)

X = data2[:400,-1:]
print(X.shape)
print(X[:5])

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
for i in range(X.shape[1]):
    X[:,i] = encoder.fit_transform(X[:,i])
print(X)

y = data2[:400,-2]
y.ravel()
print(y.shape)
print(y[:10])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(\
    X, y, test_size=0.1095, random_state=42)

print('Train:')
print(X_train.shape)
print(y_train.shape)
print('Test:')
print(X_test.shape)
print(y_test.shape)

from sklearn import svm 
model = svm.SVC(kernel='linear',gamma=0.01, C=100.)
model.fit(X_train,y_train)

y_pred = model.predict(X_test)
for i in range(len(y_test)):
    print(y_test[i],y_pred[i])

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)

data3 = datatest.values
print(data3.shape)

X = data3[:400,-1:]
print(X.shape)
print(X[:5])

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
for i in range(X.shape[1]):
    X[:,i] = encoder.fit_transform(X[:,i])
print(X)

y = data3[:400,-2]
y.ravel()
print(y.shape)
print(y[:10])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(\
    X, y, test_size=0.3, random_state=42)

print('Train:')
print(X_train.shape)
print(y_train.shape)
print('Test:')
print(X_test.shape)
print(y_test.shape)

from sklearn import svm 
model = svm.SVC(kernel='linear',gamma=0.01, C=100.)
model.fit(X_train,y_train)

y_pred = model.predict(X_test)
for i in range(len(y_test)):
    print(y_test[i],y_pred[i])

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)