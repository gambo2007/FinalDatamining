# -*- coding: utf-8 -*-
"""FinalDataMining_Ex1_Ex3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/127Gf2WOclDB5u87hgqG5KhzP1KZE4hcE

Task 1
"""

import apiclient   
import csv
#pip install google-api-python-client


KEY = 'AIzaSyAMEsC0CNzuyHHHwQ_LRDmH9DyfvF84g9o' #this is Youtube API key


def show_comment_youtube(sn):
    return {'author': sn['authorDisplayName'], 'text': sn['textDisplay']}


def crawlComment(comments, video_id, token=None):

    youtube = apiclient.discovery.build('Youtube', 'v3', developerKey=KEY)

    if token:
        results = youtube.commentThreads().list(
            part="snippet,replies",
            videoId=video_id,
            pageToken=token,
            textFormat="plainText",
            maxResults=100
        ).execute()
    else:
        results = youtube.commentThreads().list(
            part="snippet,replies",
            videoId=video_id,
            textFormat="plainText",
            maxResults=100
        ).execute()

    for item in results['items']:
        comment = show_comment_youtube(item['snippet']['topLevelComment']['snippet'])
        comments.append(comment)
        if 'replies' in item.keys():
            for reply in item['replies']['comments']:
                comment = show_comment_youtube(reply['snippet'])
                comments.append(comment)

    if 'nextPageToken' in results:
        comments.extend(crawlComment(comments, video_id, results['nextPageToken']))

    return comments

if __name__ == '__main__':
      CrawYoutubeComment = crawlComment([], 'RhPIciEZetE')
      with open('YoutubeComment.csv', 'w', encoding='UTF-8',errors='strict') as YBComment_file:
        YoutubeComment_writer = csv.writer(YBComment_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        YoutubeComment_writer.writerow(["Author and comment","Label"])
        for x in CrawYoutubeComment:
            YoutubeComment_writer.writerow([x])
            print(x)

from google.colab import files
uploaded = files.upload()

import pandas as pd

yt1=pd.read_excel('LabelYouCMT1.xlsx',sheet_name="Sheet1")
yt1.head(100)

import apiclient   
import csv
#pip install google-api-python-client


KEY = 'AIzaSyAMEsC0CNzuyHHHwQ_LRDmH9DyfvF84g9o' #this is Youtube API key


def show_comment_youtube(sn):
    return {'author': sn['authorDisplayName'], 'text': sn['textDisplay']}


def crawlComment(comments, video_id, token=None):

    youtube = apiclient.discovery.build('Youtube', 'v3', developerKey=KEY)

    if token:
        results = youtube.commentThreads().list(
            part="snippet,replies",
            videoId=video_id,
            pageToken=token,
            textFormat="plainText",
            maxResults=100
        ).execute()
    else:
        results = youtube.commentThreads().list(
            part="snippet,replies",
            videoId=video_id,
            textFormat="plainText",
            maxResults=100
        ).execute()

    for item in results['items']:
        comment = show_comment_youtube(item['snippet']['topLevelComment']['snippet'])
        comments.append(comment)
        if 'replies' in item.keys():
            for reply in item['replies']['comments']:
                comment = show_comment_youtube(reply['snippet'])
                comments.append(comment)

    if 'nextPageToken' in results:
        comments.extend(crawlComment(comments, video_id, results['nextPageToken']))

    return comments

if __name__ == '__main__':
      CrawYoutubeComment = crawlComment([], 'OzftwMONY1c')
      with open('YoutubeComment2.csv', 'w', encoding='utf-8') as YBComment_file:
        YoutubeComment_writer = csv.writer(YBComment_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        YoutubeComment_writer.writerow(["Author and comment","Label"])
        for x in CrawYoutubeComment:
            YoutubeComment_writer.writerow([x])
            print(x)

import pandas as pd

yt2=pd.read_excel('LabelYouCMT2.xlsx',sheet_name="Sheet1")
yt2.head(100)

import apiclient   
import csv
#pip install google-api-python-client


KEY = 'AIzaSyAMEsC0CNzuyHHHwQ_LRDmH9DyfvF84g9o' #this is Youtube API key


def show_comment_youtube(sn):
    return {'author': sn['authorDisplayName'], 'text': sn['textDisplay']}


def crawlComment(comments, video_id, token=None):

    youtube = apiclient.discovery.build('Youtube', 'v3', developerKey=KEY)

    if token:
        results = youtube.commentThreads().list(
            part="snippet,replies",
            videoId=video_id,
            pageToken=token,
            textFormat="plainText",
            maxResults=100
        ).execute()
    else:
        results = youtube.commentThreads().list(
            part="snippet,replies",
            videoId=video_id,
            textFormat="plainText",
            maxResults=100
        ).execute()

    for item in results['items']:
        comment = show_comment_youtube(item['snippet']['topLevelComment']['snippet'])
        comments.append(comment)
        if 'replies' in item.keys():
            for reply in item['replies']['comments']:
                comment = show_comment_youtube(reply['snippet'])
                comments.append(comment)

    if 'nextPageToken' in results:
        comments.extend(crawlComment(comments, video_id, results['nextPageToken']))

    return comments

if __name__ == '__main__':
      CrawYoutubeComment = crawlComment([], 'hkF_oIm3lU4')
      with open('YoutubeComment3.csv', 'w', encoding='utf-8') as YBComment_file:
        YoutubeComment_writer = csv.writer(YBComment_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        YoutubeComment_writer.writerow(["Author and comment","Label"])
        for x in CrawYoutubeComment:
            YoutubeComment_writer.writerow([x])
            print(x)

import pandas as pd

yt3=pd.read_excel('LabelYouCMT3.xlsx',sheet_name="Sheet1")
yt3.head(100)

"""Task 3:"""

import pandas as pd

yt1=pd.read_excel('LabelYouCMT1.xlsx',sheet_name="Sheet1")
yt1.head()

data = yt1.values
print(data.shape)

X = data[:,0:-1]
print(X.shape)
print(X[:5])

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
for i in range(X.shape[1]):
    X[:,i] = encoder.fit_transform(X[:,i])
print(X)

y = data[:,-1]
y.ravel()
print(y.shape)
print(y[:10])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(\
    X, y, test_size=0.3, random_state=42)

print('Train:')
print(X_train.shape)
print(y_train.shape)
print('Test:')
print(X_test.shape)
print(y_test.shape)

from sklearn import svm 
model = svm.SVC(kernel='linear',gamma=0.01, C=100.)
model.fit(X_train,y_train)

y_pred = model.predict(X_test)
for i in range(len(y_test)):
    print(y_test[i],y_pred[i])

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)

import pandas as pd

yt2=pd.read_excel('LabelYouCMT2.xlsx',sheet_name="Sheet1")
yt2.head()

data = yt2.values
print(data.shape)

X = data[:,0:-1]
print(X.shape)
print(X[:5])

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
for i in range(X.shape[1]):
    X[:,i] = encoder.fit_transform(X[:,i])
print(X)

y = data[:,-1]
y.ravel()
print(y.shape)
print(y[:10])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(\
    X, y, test_size=0.3, random_state=42)

print('Train:')
print(X_train.shape)
print(y_train.shape)
print('Test:')
print(X_test.shape)
print(y_test.shape)

from sklearn import svm 
model = svm.SVC(kernel='linear',gamma=0.01, C=100.)
model.fit(X_train,y_train)

y_pred = model.predict(X_test)
for i in range(len(y_test)):
    print(y_test[i],y_pred[i])

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)

import pandas as pd

yt3=pd.read_excel('LabelYouCMT3.xlsx',sheet_name="Sheet1")
yt3.head()

data = yt3.values
print(data.shape)

X = data[:,0:-1]
print(X.shape)
print(X[:5])

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
for i in range(X.shape[1]):
    X[:,i] = encoder.fit_transform(X[:,i])
print(X)

y = data[:,-1]
y.ravel()
print(y.shape)
print(y[:10])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(\
    X, y, test_size=0.3, random_state=42)

print('Train:')
print(X_train.shape)
print(y_train.shape)
print('Test:')
print(X_test.shape)
print(y_test.shape)

from sklearn import svm 
model = svm.SVC(kernel='linear',gamma=0.01, C=100.)
model.fit(X_train,y_train)

y_pred = model.predict(X_test)
for i in range(len(y_test)):
    print(y_test[i],y_pred[i])

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)